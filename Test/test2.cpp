#include <memory>
enum {
	plain = 0,
	bold = 1,
	italic = 2
};
void PrintString(const char *message, int size, int style) {}
#define EXPAND(x) x
#define PRINT_STRING_1_ARGS(message)              PrintString(message, 0, 0)
#define PRINT_STRING_2_ARGS(message, size)        PrintString(message, size, 0)
#define PRINT_STRING_3_ARGS(message, size, style) PrintString(message, size, style)
#define GET_4TH_ARG(arg1, arg2, arg3, arg4, ...) arg4
#define PRINT_STRING_MACRO_CHOOSER(...) \
	EXPAND(GET_4TH_ARG(__VA_ARGS__, PRINT_STRING_3_ARGS, PRINT_STRING_2_ARGS, PRINT_STRING_1_ARGS, ))
#define PRINT_STRING(...) EXPAND(PRINT_STRING_MACRO_CHOOSER(__VA_ARGS__)(__VA_ARGS__))

#define FUNCTION_ALIAS(SRC,DST) \
template<class... Args>\
inline auto DST(Args&&... args)->decltype(SRC(std::forward<Args>(args)...)) {\
	return SRC(std::forward<Args>(args)...);\
}

#define CLASS_ALIAS(SRC,DST) typedef SRC DST

#define _TEMPLATE_DECLARATION1  class _TEMPLATE_1
#define _TEMPLATE_DECLARATION2  _TEMPLATE_DECLARATION1,  class _TEMPLATE_2
#define _TEMPLATE_DECLARATION3  _TEMPLATE_DECLARATION2,  class _TEMPLATE_3
#define _TEMPLATE_DECLARATION4  _TEMPLATE_DECLARATION3,  class _TEMPLATE_4
#define _TEMPLATE_DECLARATION5  _TEMPLATE_DECLARATION4,  class _TEMPLATE_5
#define _TEMPLATE_DECLARATION6  _TEMPLATE_DECLARATION5,  class _TEMPLATE_6
#define _TEMPLATE_DECLARATION7  _TEMPLATE_DECLARATION6,  class _TEMPLATE_7
#define _TEMPLATE_DECLARATION8  _TEMPLATE_DECLARATION7,  class _TEMPLATE_8
#define _TEMPLATE_DECLARATION9  _TEMPLATE_DECLARATION8,  class _TEMPLATE_9
#define _TEMPLATE_DECLARATION10 _TEMPLATE_DECLARATION9,  class _TEMPLATE_10
#define _TEMPLATE_DECLARATION11 _TEMPLATE_DECLARATION10, class _TEMPLATE_11
#define _TEMPLATE_DECLARATION12 _TEMPLATE_DECLARATION11, class _TEMPLATE_12
#define _TEMPLATE_DECLARATION13 _TEMPLATE_DECLARATION12, class _TEMPLATE_13
#define _TEMPLATE_DECLARATION14 _TEMPLATE_DECLARATION13, class _TEMPLATE_14
#define _TEMPLATE_DECLARATION15 _TEMPLATE_DECLARATION14, class _TEMPLATE_15
#define _TEMPLATE_DECLARATION16 _TEMPLATE_DECLARATION15, class _TEMPLATE_16
#define _TEMPLATE_USAGE1  _TEMPLATE_1
#define _TEMPLATE_USAGE2  _TEMPLATE_USAGE1,  _TEMPLATE_2
#define _TEMPLATE_USAGE3  _TEMPLATE_USAGE2,  _TEMPLATE_3
#define _TEMPLATE_USAGE4  _TEMPLATE_USAGE3,  _TEMPLATE_4
#define _TEMPLATE_USAGE5  _TEMPLATE_USAGE4,  _TEMPLATE_5
#define _TEMPLATE_USAGE6  _TEMPLATE_USAGE5,  _TEMPLATE_6
#define _TEMPLATE_USAGE7  _TEMPLATE_USAGE6,  _TEMPLATE_7
#define _TEMPLATE_USAGE8  _TEMPLATE_USAGE7,  _TEMPLATE_8
#define _TEMPLATE_USAGE9  _TEMPLATE_USAGE8,  _TEMPLATE_9
#define _TEMPLATE_USAGE10 _TEMPLATE_USAGE9,  _TEMPLATE_10
#define _TEMPLATE_USAGE11 _TEMPLATE_USAGE10, _TEMPLATE_11
#define _TEMPLATE_USAGE12 _TEMPLATE_USAGE11, _TEMPLATE_12
#define _TEMPLATE_USAGE13 _TEMPLATE_USAGE12, _TEMPLATE_13
#define _TEMPLATE_USAGE14 _TEMPLATE_USAGE13, _TEMPLATE_14
#define _TEMPLATE_USAGE15 _TEMPLATE_USAGE14, _TEMPLATE_15
#define _TEMPLATE_USAGE16 _TEMPLATE_USAGE15, _TEMPLATE_16

#define CLASS_TEMPLATE_SINGLE_ALIAS(SRC, DST)        template<class _TEMPLATE>using DST=SRC<_TEMPLATE>
#define CLASS_TEMPLATE_MULTIPLE_ALIAS(SRC, DST, COUNT) template<_TEMPLATE_DECLARATION##COUNT>using size=message<_TEMPLATE_USAGE##COUNT>
#define GET_3TH_ARG(ARG1,ARG2,ARG3, ...) ARG3
#define CLASS_TEMPLATE_MACRO_CHOOSER(...) \
	EXPAND(GET_3TH_ARG(__VA_ARGS__, CLASS_TEMPLATE_MULTIPLE_ALIAS, CLASS_TEMPLATE_SINGLE_ALIAS, ))
#define CLASS_TEMPLATE_ALIAS(SRC,DST,...) EXPAND(CLASS_TEMPLATE_MACRO_CHOOSER(__VA_ARGS__)(SRC,DST,__VA_ARGS__))


#define FUNCTION_TEMPLATE_ALIAS(SRC,DST,COUNT) \
template<_TEMPLATE_DECLARATION##COUNT, class... Args>\
inline auto DST(Args&&... args)->decltype(SRC<_TEMPLATE_USAGE##COUNT>(std::forward<Args>(args)...)) {\
	return SRC<_TEMPLATE_USAGE##COUNT>(std::forward<Args>(args)...);\
}

CLASS_TEMPLATE_ALIAS(std::shared_ptr, Pointer);

int main(int argc, char *const argv[]) {
	Pointer<int> ptr = nullptr;
	PRINT_STRING("Hello, World!");
	PRINT_STRING("Hello, World!", 18);
	PRINT_STRING("Hello, World!", 18, bold);
	return 0;
}
